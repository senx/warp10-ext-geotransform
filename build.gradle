//
//   Copyright 2019-2020  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'net.nemerosa.versioning' version '2.14.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id 'java'
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
}

project.group = 'io.warp10'
project.description = 'Extension to transform coordinates from one geographic coordinate system to another. Based on Proj4J.'

// If the current tag is set, then it's a new release. Don't add build number
project.version = versioning.info.lastTag + ((versioning.info.tag != null) ? '' : '-' + versioning.info.build)
//
// Repositories for the project dependencies
//

repositories {
    mavenCentral()
}

configurations {
    provided
}

//
// Dependencies of the project
//
dependencies {
    compileOnly 'io.warp10:warpscript:+'

    //
    // Insert your dependencies here
    //
    implementation group: 'org.locationtech.proj4j', name: 'proj4j', version: '1.1.2'

    testImplementation 'io.warp10:warpscript:+'
    testImplementation 'junit:junit:4.12'
}

test {
    useJUnit()
}

sourceSets {
    main {
        compileClasspath = compileClasspath + configurations.provided
    }
    generated {
        compileClasspath = compileClasspath + configurations.provided + main.compileClasspath + main.output
        java {
            srcDirs 'src/generated/jmh/java'
        }
        resources {
            srcDirs 'src/generated/jmh/resources'
        }
    }
}

eclipse.classpath.plusConfigurations += [configurations.provided]  // Eclipse users only

// for IntelliJ users
idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
    }

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }
}

shadowJar {
    // In build/libs the shadowJar is suffixed with the uberjar classifier.
    archiveClassifier.set('uberjar')

    manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
    }

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }
}

//
// Remove the ShadowJar from the java component. This avoids publishing the shadowJar
// when using "from components.java".
//
components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
    skip()
}

//
// Maven related config
//
publishing {
    publications {
        jar(org.gradle.api.publish.maven.MavenPublication) {
            from components.java
        }
        uberJar(org.gradle.api.publish.maven.MavenPublication) {
            // Publishing the shadowJar is done using the version and not the classifier as
            // Spark cannot use classifier dependencies.
            artifact(tasks['shadowJar']) { classifier = null }
            artifact(tasks['javadocJar'])
            artifact(tasks['sourcesJar'])
            version += '-uberjar'
        }

        // Configure all POMs
        withType(org.gradle.api.publish.maven.MavenPublication) {
            // customize all publications here
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/senx/' + project.name

                scm {
                    connection = 'scm:git:git://github.com/senx/' + project.name
                    developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
                    url = 'https://github.com/senx/' + project.name
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
            }
        }
    }

    repositories {
        if (project.hasProperty('ossrhUsername')) {
            maven {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
        if (project.hasProperty('nexusUsername')) {
            maven {
                name 'nexus'
                allowInsecureProtocol true
                url "$nexusHost/repository/maven-releases/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
}

if (project.hasProperty('ossrhUsername')) {
    nexusStaging {
        packageGroup = 'io.warp10'
        username ossrhUsername
        password ossrhPassword
    }
}

//
// Artifact Signing
//
if (project.hasProperty('signing.gnupg.keyName')) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
}
